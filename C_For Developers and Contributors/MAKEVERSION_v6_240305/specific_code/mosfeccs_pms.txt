//START MOSFECCS PMS
  // mosfeccs 220212.1
  // SMILES CODE TO STRUCTURE (SMILES PARSING)
      function parse_m_SMILES(msmico) {

        // local use
        const pcrit = 2.0*crit;
        let emgr=0;
        let eshift = 0;
        let gbr = new Rect(0,0,0,0);
        let i=0;
        let j=0;
        let jj=0;
        let k=0;
        let key = '';
        let nexH = 0; // counter for explicit H //BF191028.3
        let onlyH=false;
        let sel = 0;
        let smgr=0;
        let tree_h_max = 0;
        let tree_rects = [];
        let xratio = 1;
        let yratio = 1;
      
        // variables for SMILES parsing SECTION
        const atInRh={}; // dict for ring atoms. key is the atom index as string,value an array with ring numbers
        const etbl = {}; // translation map for atom indices  heavy -> incl expl. H  //BF191028.3
        const heavy_ends = [];
        const ncreH = []; // number of created explicit H per molecule  //BF191028.3
        const path_ends = [];
        const path_starts = [];
        const pbp = [[0]]; // 2D-array of bonding partners
        const pezh = {}; // dict storing EZ double bond objects. key is 'a-b' with a and b the 2 atoms of the double bond
        const pic = []; // array of incoming atom indices
        const prfs = []; // array of the prefixes of atom smiles
        const psfs = []; // array of the suffixes of atom smiles
        const rclh = {}; // dict storing ringclosure objects. key is the ring closure digit as string
        const rxn_paths = [];
        const tree_ends = [];
        let cchains = [];
        let emfuPrings = [];
        let is_GS_path=false;
        let m2l = 0;
        let m2r = 0;
        let m2revseq=[];
        let m_smico = [];
        let matched = []; 
        let mchain = -1;
        let morih = {};  // molecular orientation object dict 
        let natofs=0;
        let nmoloffs=0; // offset for molecules to be added by parsing rxnSmiles
        let ovl = new Coord(0,0);
        let pIsolatedRings = [];
        let pRingFusions = [];
        let pSpiroRings = [];
        let parserr = ''; //BF191122.1        
        let parwix = -1;
        let parwsmiles = '';
        let pats = []; // array of the atom SMILES. Index is atom index in SMILES
        let pb = [new Bond(0,0,0)]; // index 0 contains a dummy bond
        let ploterr='';
        let plpix = -1;
        let plpsmiles = '';
        let prings = [[0]]; // array storing the atoms in ring, index is ring closure digit as number
        let prxnarro = []; //the array of Rxna{} objects from parsing rxnsmiles
        let prxnix = -1;
        let prxnsmiles = ''; // rxn arrow smiles to parse
        let pscAtoms = []; // array with the atoms that are designated as stereogenic (@ or @@) in the SMILES smico
        let pscCCatoms = [];
        let rms = 0;
        let rmsmin = 0;
        let rotmin = 0;
        let rtchains = [];
        let rxn_path_GS_molseq=[];       
        let rxn_path_arrseq = [];
        let rxnaroffs=0; // offset for rxn arrows to be added by parsing rxnSmiles
        let tchains = [];
        let totrot = 0;
        let ymaxRxn = 0;
        
        m_smico= [];
      
        if (msmico === '') { return; }
        
        saveState();
        
        // extract the arrow and lone pairs parts (if present) and check for unbalanced delimiters
        matched = msmico.match(/!(.+)!/);
        if (matched !== null) {
          plpsmiles = matched[1];
          plpix = matched.index;
        } else if (msmico.includes('!')) { //BF191123.1
          parserr='unmatched ! (lone pairs section)'; //BF191123.1
        } 
        matched = [];
        matched = msmico.match(/¿(.+)¿/);
        if (matched !== null) {
          parwsmiles = matched[1];
          parwix = matched.index;
        } else if (msmico.includes('¿')) { //BF191123.1
          parserr='unmatched ¿ (curved arrows section)'; //BF191123.1
        }
        matched = [];        
        matched = msmico.match(/§(.+)§/);
        if (matched !== null) {
          prxnsmiles = matched[1];
          prxnix = matched.index;
        } else if (msmico.includes('§')) { //BF191123.1
          parserr='unmatched § (reaction arrows section)'; //BF191123.1
        }
        if (parserr !== '') { //BF191123.1
          alert("Parse-SMILES Error:\n"+parserr+"\nin SMILES: "+msmico); //BF191123.1
          return; //BF191123.1
        } //BF191123.1
        
        if (parwix > -1) { // strip arrow, lone pair, and rxn arrow sections off the end of msmico
          msmico = msmico.substring(0,parwix);
        } else if (plpix > -1) {
          msmico = msmico.substring(0,plpix);
        } else if (prxnix > -1) {
          msmico = msmico.substring(0,prxnix);
        }        

        // check for illegal dot
        if ((/^\./.test(msmico)) || (/\.$/.test(msmico)) || (/\.\./.test(msmico))) { //BF201206
          parserr='illegal dot at start and/or end or multiple dots'; //BF201206
        } //BF201206
        if (parserr !== '') { //BF201206
          alert("Parse-SMILES Error:\n"+parserr+"\nin SMILES: "+msmico); //BF201206
          return; //BF201206
        } //BF201206
        
        m_smico = msmico.split('.');
        tree_rects=[];
        //ADD mode: pre-existing molecules (only in MOSCFECCS (interactive))
        if (m.length > 1) { 
          // ADD mode: m[],b[],arro, rxnarro will be extended with the elements from putSMILES
          // molcos[], iM_arws[], molco_brects[] will be recalculated for all molecules (preexisting and added).
          natofs = m.length-1; //natofs: offset due to pre-existing atoms
          nmol=getAll_t_Trees();
          for (i=1;i<=nmol;i++) { // selector 't' is base 1
            gbr=getboundrect(m,i,'t');
            tree_rects.push(gbr);
            tree_h_max = Math.max(tree_h_max,gbr.h);
          }
          nmoloffs=nmol; // offset for 1st molecule from parsing
          if (arro.length > 0) {
            get_interMol_arws();
            iM_arws = [];             
            molcos = [];
            molco_brects = [];
          }
          if (rxnarro.length > 0) { // pre-existing rxn arrows
            // determine the preexisting molgroups
            rxnaroffs=0;
            pmolgrp = [];
            get_pmolgrps(rxnarro); // pmolgrp[] will now contain the pre-existing molgroups (without mol that are not associated to rxn)
            rxnaroffs=rxnarro.length; // offset for pre-existing reaction arrows
          } else {
            rxnaroffs=0;
          }
        // REPLACE MODE no pre-existing molecules (only mode in mostest and msvg)      
        } else { 
          nmoloffs=0;
          rxnaroffs=0;
        }
        if (prxnsmiles !== '') { // rxn to parse
          parseRxnArrows(prxnsmiles,nmoloffs); // the new rxn arrows will be in prxnarro[] with molnumbers in .stn and .etn incremented by nmoloffs.
        }
        
        // parse the individual SMILES in m_smico[]
        i=0;
        sel=1+nmoloffs; // set selector to next free mol_nr
        while(i < m_smico.length) {
          //check individual SMILES for unbalanced parentesis      
          if (m_smico[i] === '') { break; }
          if (checkPB(m_smico[i])===1) { //BF191122.1
            parserr='unbalanced \(\)'; //BF191122.1
          } else if (checkPB(m_smico[i])=== -1) { //BF191122.1
            parserr='unbalanced \[\]'; //BF191122.1
          } //BF191122.1
          if (parserr !== '') { //BF191122.1 specific for MOSFECCS
            alert("Parse-SMILES Error:\n"+parserr+"\nin SMILES: "+m_smico[i]); //BF191122.1
            kc = 0;
            document.getElementById('shift').className = "shift";
            document.getElementById('alt').className = "alt";
            return; //BF191122.1
          } //BF191122.1

          parseSMILES(m_smico[i]); //PARSER FOR INDIVDIUAL MOLECULE CALLED HERE (works with m_s,b_s)

          // start specific for MOSFECCS          
          if (ploterr != '') { //BF200103.2
            if (parserr==='') {
              parserr = ploterr;
            } else {
              parserr += '\n'+ploterr;
            }
          }
          
          if (parserr !== '') { //BF191122.1
            alert("Parse-SMILES Error:\n"+parserr+"\nin SMILES: '"+m_smico[i]+"'"); //BF191122.1
            recoverState();
            return; //BF191122.1
          } //BF191122.1
          // end specific for MOSFECCS          
          
          // label substructure
          for (jj=1;jj<m_s.length;jj++) {
            m_s[jj].s = sel;
            m_s[jj].t = sel;
          }
          for (jj=1;jj<b_s.length;jj++) {
            b_s[jj].s = sel;
          }
          // determine the number of explicit H
          nexH = 0; //BF191028.3
          onlyH=false;
          if (m_s[1].an !== 1) { // only for m_s with heavy atoms at the start //BF191101.2
            // excludes trees consisting of only H,H+,H- or H2
            for (jj=1;jj<m_s.length;jj++) { //BF191028.3
              if (m_s[jj].an === 1) { //BF191028.3
                nexH++; //BF191028.3
              } //BF191028.3
            } //BF191028.3
          } else {
            onlyH=true;
            jj=1;
            while (jj < m_s.length) {
              if (m_s[jj].an !== 1) {
                onlyH=false;
              }
              jj++;
            }
          }
          ncreH.push(nexH); //BF191028.3

          // ADD TREE to m[] and b[]
          addTree(m_s,b_s,m,b,sel,0,0); // addTree selects based on mar[].s
          tree_ends.push(m.length-1); // tree_ends is base 0

          // determine the last non expl. H atom
          if (!onlyH) {
            jj=m.length-1;
            while ((jj > 0) && (m[jj].an === 1)) { //BF191028.3
              jj--;
            } //BF191028.3
            heavy_ends.push(jj);
          } else {
            heavy_ends.push(m.length-1);
          }

          // center the tree on canvas
          gbr = getboundrect(m,sel,'s');
          tree_h_max = Math.max(tree_h_max,gbr.h);
          shiftSel_s(m,(arect.l+arect.w/2)-(gbr.l + gbr.w/2),(arect.t+arect.h/2)-(gbr.t + gbr.h/2),sel);
          gbr.l=0;
          gbr.t=0;
          tree_rects.push(gbr);
          sel++;
          i++;
        } // end while over all molecules to be parsed
                
        nmol = sel-1; // the new total number of molecules
        
        //construct translation table for heavy atom indices to new index after creation of explicit H
        eshift = 0; //BF191028.3
        i=0; //BF191028.3
        j=1; //BF191028.3
        jj=1;
        while (i < nmol) { //loop over all molecules  //BF191028.3
          while (jj <= heavy_ends[i]) { //BF191028.3
            etbl[j] = j + eshift;  //BF191028.3
            j++;  //BF191028.3
            jj++;
          } //BF191028.3
          eshift += ncreH[i]; //BF191028.3
          if (i < nmol-1) {
            jj = tree_ends[i]+1;
          }
          i++; //BF191028.3
        }            

        if (prxnarro.length > 0) {
          get_pmolgrps(prxnarro); // this appends the molgroups of the newly filled prxnarro[] to pmolgrp[]
                                // (without newly parsed mol that are not associated to rxn)
          j=0;
          while (j < prxnarro.length) {
            deep_copyRxnArrow(prxnarro,rxnarro,j,j+rxnaroffs);
            j++;
          }
          // rxnarro[] now contains all reaction arrows (pre-existing and newly parsed)
        }

        // at this point all molgroups are present (preexisting, newly parsed, all associated with rxn)
        
        // parse lone pair smiles
        if (plpsmiles !== '') {
          parseLonePairs(plpsmiles,natofs);
        }

        // parse curved arrows
        if (parwsmiles !== '') {
          parseArrows(parwsmiles,natofs);
          // parseArrows() adjusts the mol_brects for molecules connected by intermolecular curved arrows
          // it shifts such molecules so that they are close but without overlap of the mol_brects[].
          // 
          // molgrp_brects[] is filled by get_molgrp_brects() and requires rxnarro[]
          // however molgrp-brects[] is calculated anew by layout_molgrps() with mols in molgroup horizontally tiled
          // layout_rxn() expects all molgrp_brects[] to be centered in drect
          if (arro.length > 0) {
            get_interMol_arws();
//             
          }
        }
        get_molcos();
        get_molco_brects();
        center_molcos();
                
        if (rxnarro.length > 0) { // rxn arrows present
          // now determine the rxn network for all rxnarro[] and molgroups.
          get_molgr_net(pmolgrp);
          layout_molgrps(crit);
          get_rxn_molcos();
          free_molcos = get_free_molcos();
          get_molco_brects();
          for (i=0;i<rxn_paths.length;i++) {
            rxn_path_arrseq = get_rxn_path_rxn_arrows(i);
            //is it a GSpath?
            for (j=0;j<rxn_path_arrseq.length;j++) {
              is_GS_path=true;
              if (rxnarro[rxn_path_arrseq[j]].ty!==3) {
                is_GS_path=false;
              }
            }
            if (is_GS_path) { // rxn path connecting resonance structures
              rxn_path_GS_molseq=[]; // array of the single molNrs constituting the GS_path (each mgr has only one member molecule)  
              for (j=0;j<rxn_paths[i].path.length;j++) {
                rxn_path_GS_molseq.push(pmolgrp[rxn_paths[i].path[j]].mols[0]);
                get_mori(pmolgrp[rxn_paths[i].path[j]].mols[0]);
              } // end for over rnx_paths[].path elements (mgr indices in pmolgrp)

              // rotate GS that are not in the same orientation as the first one in the GS_path
              m2l=rxn_path_GS_molseq[0];
              for (j=1;j<rxn_path_GS_molseq.length;j++) {
                m2r=rxn_path_GS_molseq[j];
                m2revseq=morih[m2r].esq.slice(0);
                m2revseq.reverse();
                // same element sequence and orientation
                if (sameArray(morih[m2l].esq,morih[m2r].esq) && (Math.abs(morih[m2l].aed-morih[m2r].aed)<10)) { 
                } else if (sameArray(morih[m2l].esq,m2revseq) && (Math.abs(morih[m2l].aed-morih[m2r].aed)<10)) { // element sequences are reverse of each other 
                  for (k=1;k<m.length;k++) { // select m2r atoms
                    if (m[k].t===m2r) {
                      m[k].s=999;
                    } else {
                      m[k].s=0;
                    }
                  }
                  selected=true;
                  rot2D(m,999,morih[m2r].gc.x,morih[m2r].gc.y,180,false); // rotate m2r by 180°
                  get_mori(m2r);
                  if (morih[m2l].manp.x != morih[m2r].manp.x) {
                    rotTree180(m,b,'x',999);
                    get_mori(m2r);
                    clearSelection();
                  }
                } else { // different element sequences: try to rotate in steps of 15° to the minimal rms
                  for (k=1;k<m.length;k++) { // select m2r atoms
                    if (m[k].t===m2r) {
                      m[k].s=999;
                    } else {
                      m[k].s=0;
                    }
                  }
                  selected=true;
                  //rotate in steps of 15° to find the orientation with the minimum rms (sum of absolute differences in manp and manm values of the compared maolecules)
                  rms = Math.abs(morih[m2l].manp.x-morih[m2r].manp.x)+Math.abs(morih[m2l].manp.y-morih[m2r].manp.y)+Math.abs(morih[m2l].manm.x-morih[m2r].manm.x)+Math.abs(morih[m2l].manm.y-morih[m2r].manm.y);           
                  totrot = 0;
                  rmsmin=1000000;
                  rotmin=0;
                  for (k=0;k<16;k++) {
                    rot2D(m,999,morih[m2r].gc.x,morih[m2r].gc.y,15,false); // rotate m2r by 15°
                    totrot += 15;
                    get_mori(m2r);
                    rms = Math.abs(morih[m2l].manp.x-morih[m2r].manp.x)+Math.abs(morih[m2l].manp.y-morih[m2r].manp.y)+Math.abs(morih[m2l].manm.x-morih[m2r].manm.x)+Math.abs(morih[m2l].manm.y-morih[m2r].manm.y);           
                    if (rms < rmsmin) { 
                      rmsmin = rms;
                      rotmin = totrot; 
                    }
                  }
                  if (rmsmin < 10) {  
                    rot2D(m,999,morih[m2r].gc.x,morih[m2r].gc.y,rotmin-totrot,false); // rotate m2r by 180°
                  } else {
                    rotTree180(m,b,'y',999);
                    get_mori(m2r);
                    rms = Math.abs(morih[m2l].manp.x-morih[m2r].manp.x)+Math.abs(morih[m2l].manp.y-morih[m2r].manp.y)+Math.abs(morih[m2l].manm.x-morih[m2r].manm.x)+Math.abs(morih[m2l].manm.y-morih[m2r].manm.y);           
                    if (rms > 10) {
                      rotTree180(m,b,'y',999);
                      rotTree180(m,b,'x',999);
                    }                  
                  }                    
                  get_mori(m2r);
                  rms = Math.abs(morih[m2l].manp.x-morih[m2r].manp.x)+Math.abs(morih[m2l].manp.y-morih[m2r].manp.y)+Math.abs(morih[m2l].manm.x-morih[m2r].manm.x)+Math.abs(morih[m2l].manm.y-morih[m2r].manm.y);           
                }
                                
              }
            } // end for GSpath
          } // end loop over all rxn_paths       
          get_molgrp_brects();            
          layout_rxn();
          get_molco_brects();
          for (i=0;i<rxnarro.length;i++) {
            for (j=0;j<pmolgrp.length;j++) {
              if (sameArrayElements(pmolgrp[j].mols,rxnarro[i].stn)) {
                smgr=j;
              }
              if (sameArrayElements(pmolgrp[j].mols,rxnarro[i].etn)) {
                emgr=j;
              }
            }
            rxnco=[];
            calcNewRxnArwCoord(rxnarro[i].stn,rxnarro[i].etn,molgrp_brects[smgr],molgrp_brects[emgr]);
            rxnarro[i].sco.x = rxnco[0];
            rxnarro[i].sco.y = rxnco[1];
            rxnarro[i].eco.x = rxnco[2];
            rxnarro[i].eco.y = rxnco[3];
          }
          ymaxRxn=0;
          for (i=0;i<molgrp_brects.length;i++) {
            ymaxRxn = Math.max(ymaxRxn,(molgrp_brects[i].t+molgrp_brects[i].h));
          }
          tile_free_molcos(ymaxRxn);        
        } else { // without reactions, use tiling of molcos
          tile_molcos();  
        }
        
        center_scale_all(); // center the drawing on canvas and scale if too large

        if (warnAtoms.length > 0) { // SMILES parsing produced warnAtoms
          elidup(warnAtoms);
          drawMol(ctx,0,true);  
          for (i=0;i<warnAtoms.length;i++) {
            drawAtomWarning(igctx,m,warnAtoms[i]);
          }
          alert("WARNING:\nParsing of SMILES failed at one or more \nambiguous or inconsistent stereogenic centres!\n\nStereo up/down bonds at centers marked by red squares were replaced by normal single bonds.\n\nThe red squares disappear with the next drawing action");
          warnAtoms=[];
          m_smico=[];
          kc = 0;
          document.getElementById('shift').className = "shift";
          document.getElementById('alt').className = "alt";
          return;
        }
        // check the new molecule against the entered SMILE-code
        getsmiles(); // smiles may contain preexisting molecules, arrows and lone pairs, msmico is vanilla SMILES
        smiles = smiles.trim();
        msmico = msmico.trim();
        if (smiles.includes(msmico)) { // msmico is contained in smiles: parser worked ok.
          // draw the molecule
          drawMol(ctx,0,true);
          kc = 0;
          document.getElementById('shift').className = "shift";
          document.getElementById('alt').className = "alt";
          saveState();
          resetDV();
          m_smico=[];
        } else if (warnAtoms.length > 0) {
          elidup(warnAtoms);
          drawMol(ctx,0,true);
          for (i=0;i<warnAtoms.length;i++) {
            drawAtomWarning(igctx,m,warnAtoms[i]);
          }
          alert("WARNING:\nParsing of SMILES produced one or more \nambiguous or inconsistent stereogenic centres!\n\nCheck the stereo-drawing of the centers marked by red squares.\n\nThe red squares disappear with the next drawing action");
          kc = 0;
          document.getElementById('shift').className = "shift";
          document.getElementById('alt').className = "alt";
          warnAtoms=[];
          m_smico=[];
        } else {
          drawMol(ctx,0,true);
          kc = 0;
//           demo.innerHTML = 'kc='+String(kc); //DEMO
          document.getElementById('shift').className = "shift";
          document.getElementById('alt').className = "alt";          
          alert("Parsing failed!\nentered SMILES:\n"+msmico+"\n"+smiles+"\nSMILES of parsed structure"); 
          saveState();
          resetDV();
          m_smico=[];
        }  
        kc = 0;
        document.getElementById('shift').className = "shift";
        document.getElementById('alt').className = "alt";

  // END of parse_m_SMILES() main section
  
//END MOSFECCS PMS
