//START MOSTEST SVG  

      function center_scale_all_svg() { 
        let i=0;     
        let xratio = 1;
        let yratio = 1;
        let gbr = new Rect(0,0,0,0);
        let scf = 1;
        let currBl = bondlength;
        let newBl = bondlength;
        let topspace=50;
        let leftspace=20;
        

        // center molecules on canvas and scale if too large
        // select all atoms
        for (i=1;i<m.length;i++) {
          m[i].s = 9;
        }
        gbr = getboundrect(m,9,'s');
        shiftSel_s(m,(leftspace)-(gbr.l),(topspace)-(gbr.t),9);
        get_molco_brects();
        if (rxnarro.length > 0) {
          shiftRxnArrows(rxnarro,(leftspace)-(gbr.l),(topspace)-(gbr.t));
          shiftMolgrp_brects((leftspace)-(gbr.l),(topspace)-(gbr.t));
        }
        xratio = gbr.w/arect.w;
        yratio = gbr.h/arect.h;
        if ((xratio > 1) || (yratio > 1)) {
          scf = 1/(1.1*Math.max(xratio,yratio));
          newBl = 5*Math.floor(currBl*scf/5);
          scf = newBl/currBl;
          scale2D(m,9,arect.l+arect.w/2,arect.t+arect.h/2,scf,false); //bugfix 190206.1: factor 1.1
          adjust_bondlength(scf); //bugfix 190206.1: factor 1.1
          charH = Math.floor(6+(bondlength-15)*(8/30));

          
          if (rxnarro.length > 0) {
            scaleRxnArrows(rxnarro,arect.l+arect.w/2,arect.t+arect.h/2,scf);
            scaleRectArray(molgrp_brects,arect.l+arect.w/2,arect.t+arect.h/2,scf);
          }
        }
        clearSelection();
        for (i=1;i<m.length;i++) {
          m[i].s = 9;
        }
        gbr = getboundrect(m,9,'s');
        gbr = margin(gbr,20); // bugfix230109.1
        

        return gbr;
      }

  // marg
      function margin(orct,marg) { // bugfix230109.1
        var rct = new Rect(0,0,0,0);
        
        rct.l = orct.l-marg;
        rct.t = orct.t-marg;
        rct.w = orct.w + 2*marg;
        rct.h = orct.h + 2*marg;
        return rct;
      }

  // draw Mol_svg
      function drawMol_svg(brc,s,ayn,smic,fail) {
        let i, k, a1, a2, a1x, a1y, a2x, a2y, bt, cp;
        let br = new Rect(0,0,0,0);
        let svgW = 0;
        let svgH = 0;
        let bondColor="black", atsymColor="black";
      //      var atstr = "";
  
        if(m.length === 1) {
          return;
        }
        
        br.l=brc.l;
        br.t=brc.t;
        br.w=brc.w;
        br.h=brc.h;
        svgW = br.w+100;
        svgH = br.h+50;
        
      // svg header        
        svg = '';
        svg += '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n';
        svg += '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n';
//         svg += '<svg width="'+br.w+'" height="'+br.h+'" viewBox="'+br.l+' '+br.t+' '+br.w+' '+br.h+'"';

        svg += '<svg width="'+svgW+'" height="'+svgH+'" viewBox="10 0 '+String(Math.round(svgW))+' '+String(Math.round(svgH+50))+'"';
//         svg += '<svg width="'+String(Math.round(svgW))+'" height="'+String(Math.round(svgW))+'" viewBox="0 0 '+String(Math.round(svgW))+' '+String(Math.round(svgH))+'"';
        svg += ' preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg">\n';

        svgwidth.push(svgW);
  
        
        bondColor = (s === 1)? "magenta":"black";
        if (b.length >= 2) {  // draw all bonds
          cp=0;
          for (k = 1; k < b.length; k++) {
            a1 = b[k].fra;
            a2 = b[k].toa;
            a1x = m[a1].x;
            a1y = m[a1].y;
            a2x = m[a2].x;
            a2y = m[a2].y;
            bt = b[k].btyp;
            if (bt===5) {
              cp++;
            }
            drawBond_svg(a1x, a1y, a2x, a2y, bt, stdlw, bondColor,k,cp);
          }
        }

        atsymColor = (s === 1)? "magenta":"black";
        for (i=1; i < m.length; i++) { // draw the atom symbols  
          drawAtomLabel_svg(i,atsymColor);
        } // end loop over atoms
  
        if ((arro.length > 0) && (ayn)) {
          for (i=0; i < arro.length; i++) {
            drawArrow_svg(i,'red');
          }
        }
        if ((rxnarro.length > 0) && (ayn)) {
          for (i=0; i < rxnarro.length; i++) {
            drawRxnArrow_svg(i,'black');
          }
        }
        svg += '\t<text x="10" y="15" style="fill:blue; font-family: Arial, Helvetica, sans-serif; font-size: 14px">'+name+'</text>\n';
//         svg += '\t<rect x="'+arect.l+'" y="'+arect.t+'" width="'+arect.w+'" height="'+arect.h+'" fill="none" stroke="black" stroke-width="3"/>\n'; 
//         svg += '\t<rect x="'+br.l+'" y="'+br.t+'" width="'+svgW+'" height="'+svgH+'" fill="none" stroke="blue" stroke-width="1"/>\n'; 
        svg += '\t<rect x="0" y="0" width="'+String(Math.round(svgW-50))+'" height="'+(svgH+30)+'" fill="none" stroke="blue" stroke-width="1"/>\n'; 
//         svg += '\t<rect x="'+br.l+'" y="'+br.t+'" width="'+br.w+'" height="'+br.h+'" fill="none" stroke="green" stroke-width="1"/>\n'; 
//         for (i=0;i<molgrp_brects.length;i++) {
//           svg += '\t<rect x="'+molgrp_brects[i].l+'" y="'+molgrp_brects[i].t+'" width="'+molgrp_brects[i].w+'" height="'+molgrp_brects[i].h+'" fill="none" stroke="red" stroke-width="2"/>\n';           
//           svg += '\t<text x="'+f1(molgrp_brects[i].l+10)+'" y="'+f1(molgrp_brects[i].t+molgrp_brects[i].h-5)+'" style="fill:red; font-family: Arial, Helvetica, sans-serif; font-size: 14px">'+String(i)+'</text>\n';
//           svg += '\t<text x="'+f1(molgrp_brects[i].l+10)+'" y="'+f1(molgrp_brects[i].t+molgrp_brects[i].h/2)+'" style="fill:green; font-family: Arial, Helvetica, sans-serif; font-size: 14px">'+pmolgrp[i].mols.join()+'</text>\n';
//         }
//         for (i=0;i<molco_brects.length;i++) {
//           svg += '\t<rect x="'+molco_brects[i].l+'" y="'+molco_brects[i].t+'" width="'+molco_brects[i].w+'" height="'+molco_brects[i].h+'" fill="none" stroke="blue" stroke-width="1"/>\n';           
//           svg += '\t<text x="'+f1(molco_brects[i].l+molco_brects[i].w-10)+'" y="'+f1(molco_brects[i].t+14)+'" style="fill:blue; font-family: Arial, Helvetica, sans-serif; font-size: 14px">'+String(i)+'</text>\n';
//         }
        if (fail) {
          svg += '\t<text x="'+f1(10)+'" y="'+f1(svgH-5)+'" style="fill:red; font-family: Arial, Helvetica, sans-serif; font-size: 14px">'+'Parser Failure!'+'</text>\n';
        }
        // close up svg       
//        svg += '\t<rect x="0" y="0" width="'+String(Math.round(svgW))+'" height="'+String(Math.round(svgH))+'" stroke="blue" stroke-width="1" fill="none"/>\n';
        svg += '</svg>\n';

      } // draw the molecular data as structural formula in SVG format

//END MOSTEST SVG  
